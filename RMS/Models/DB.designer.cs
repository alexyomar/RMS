#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Regional.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Regional")]
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertHotel(Hotel instance);
    partial void UpdateHotel(Hotel instance);
    partial void DeleteHotel(Hotel instance);
    partial void InsertPaymentMethod(PaymentMethod instance);
    partial void UpdatePaymentMethod(PaymentMethod instance);
    partial void DeletePaymentMethod(PaymentMethod instance);
    partial void InsertPeriod(Period instance);
    partial void UpdatePeriod(Period instance);
    partial void DeletePeriod(Period instance);
    partial void InsertPromotion(Promotion instance);
    partial void UpdatePromotion(Promotion instance);
    partial void DeletePromotion(Promotion instance);
    partial void InsertReservation(Reservation instance);
    partial void UpdateReservation(Reservation instance);
    partial void DeleteReservation(Reservation instance);
    partial void InsertReservationsBuyed(ReservationsBuyed instance);
    partial void UpdateReservationsBuyed(ReservationsBuyed instance);
    partial void DeleteReservationsBuyed(ReservationsBuyed instance);
    partial void InsertReservationStatus(ReservationStatus instance);
    partial void UpdateReservationStatus(ReservationStatus instance);
    partial void DeleteReservationStatus(ReservationStatus instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    #endregion
		
		public DBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RegionalConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<Hotel> Hotels
		{
			get
			{
				return this.GetTable<Hotel>();
			}
		}
		
		public System.Data.Linq.Table<PaymentMethod> PaymentMethods
		{
			get
			{
				return this.GetTable<PaymentMethod>();
			}
		}
		
		public System.Data.Linq.Table<Period> Periods
		{
			get
			{
				return this.GetTable<Period>();
			}
		}
		
		public System.Data.Linq.Table<Promotion> Promotions
		{
			get
			{
				return this.GetTable<Promotion>();
			}
		}
		
		public System.Data.Linq.Table<Reservation> Reservations
		{
			get
			{
				return this.GetTable<Reservation>();
			}
		}
		
		public System.Data.Linq.Table<ReservationsBuyed> ReservationsBuyeds
		{
			get
			{
				return this.GetTable<ReservationsBuyed>();
			}
		}
		
		public System.Data.Linq.Table<ReservationStatus> ReservationStatus
		{
			get
			{
				return this.GetTable<ReservationStatus>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _LastName;
		
		private string _PersonalId;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Email;
		
		private EntitySet<Reservation> _Reservations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPersonalIdChanging(string value);
    partial void OnPersonalIdChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Customer()
		{
			this._Reservations = new EntitySet<Reservation>(new Action<Reservation>(this.attach_Reservations), new Action<Reservation>(this.detach_Reservations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PersonalId
		{
			get
			{
				return this._PersonalId;
			}
			set
			{
				if ((this._PersonalId != value))
				{
					this.OnPersonalIdChanging(value);
					this.SendPropertyChanging();
					this._PersonalId = value;
					this.SendPropertyChanged("PersonalId");
					this.OnPersonalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Reservation", Storage="_Reservations", ThisKey="Id", OtherKey="IdCustomer")]
		public EntitySet<Reservation> Reservations
		{
			get
			{
				return this._Reservations;
			}
			set
			{
				this._Reservations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.State")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Hotel> _Hotels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public State()
		{
			this._Hotels = new EntitySet<Hotel>(new Action<Hotel>(this.attach_Hotels), new Action<Hotel>(this.detach_Hotels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Hotel", Storage="_Hotels", ThisKey="Id", OtherKey="IdState")]
		public EntitySet<Hotel> Hotels
		{
			get
			{
				return this._Hotels;
			}
			set
			{
				this._Hotels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hotels(Hotel entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Hotels(Hotel entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hotel")]
	public partial class Hotel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private string _Address;
		
		private string _Contact;
		
		private int _IdState;
		
		private bool _Active;
		
		private bool _CanSell;
		
		private string _TripAdvisor;
		
		private string _TripAdvisorEng;
		
		private string _Map;
		
		private EntitySet<Period> _Periods;
		
		private EntitySet<Room> _Rooms;
		
		private EntitySet<Service> _Services;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContactChanging(string value);
    partial void OnContactChanged();
    partial void OnIdStateChanging(int value);
    partial void OnIdStateChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCanSellChanging(bool value);
    partial void OnCanSellChanged();
    partial void OnTripAdvisorChanging(string value);
    partial void OnTripAdvisorChanged();
    partial void OnTripAdvisorEngChanging(string value);
    partial void OnTripAdvisorEngChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    #endregion
		
		public Hotel()
		{
			this._Periods = new EntitySet<Period>(new Action<Period>(this.attach_Periods), new Action<Period>(this.detach_Periods));
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Contact
		{
			get
			{
				return this._Contact;
			}
			set
			{
				if ((this._Contact != value))
				{
					this.OnContactChanging(value);
					this.SendPropertyChanging();
					this._Contact = value;
					this.SendPropertyChanged("Contact");
					this.OnContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdState", DbType="Int NOT NULL")]
		public int IdState
		{
			get
			{
				return this._IdState;
			}
			set
			{
				if ((this._IdState != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStateChanging(value);
					this.SendPropertyChanging();
					this._IdState = value;
					this.SendPropertyChanged("IdState");
					this.OnIdStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanSell", DbType="Bit NOT NULL")]
		public bool CanSell
		{
			get
			{
				return this._CanSell;
			}
			set
			{
				if ((this._CanSell != value))
				{
					this.OnCanSellChanging(value);
					this.SendPropertyChanging();
					this._CanSell = value;
					this.SendPropertyChanged("CanSell");
					this.OnCanSellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TripAdvisor", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TripAdvisor
		{
			get
			{
				return this._TripAdvisor;
			}
			set
			{
				if ((this._TripAdvisor != value))
				{
					this.OnTripAdvisorChanging(value);
					this.SendPropertyChanging();
					this._TripAdvisor = value;
					this.SendPropertyChanged("TripAdvisor");
					this.OnTripAdvisorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TripAdvisorEng", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TripAdvisorEng
		{
			get
			{
				return this._TripAdvisorEng;
			}
			set
			{
				if ((this._TripAdvisorEng != value))
				{
					this.OnTripAdvisorEngChanging(value);
					this.SendPropertyChanging();
					this._TripAdvisorEng = value;
					this.SendPropertyChanged("TripAdvisorEng");
					this.OnTripAdvisorEngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Period", Storage="_Periods", ThisKey="Id", OtherKey="IdHotel")]
		public EntitySet<Period> Periods
		{
			get
			{
				return this._Periods;
			}
			set
			{
				this._Periods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Room", Storage="_Rooms", ThisKey="Id", OtherKey="IdHotel")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Service", Storage="_Services", ThisKey="Id", OtherKey="IdPosada")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Hotel", Storage="_State", ThisKey="IdState", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Hotels.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Hotels.Add(this);
						this._IdState = value.Id;
					}
					else
					{
						this._IdState = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Periods(Period entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = this;
		}
		
		private void detach_Periods(Period entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = null;
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = null;
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentMethod")]
	public partial class PaymentMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Notes;
		
		private EntitySet<ReservationsBuyed> _ReservationsBuyeds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public PaymentMethod()
		{
			this._ReservationsBuyeds = new EntitySet<ReservationsBuyed>(new Action<ReservationsBuyed>(this.attach_ReservationsBuyeds), new Action<ReservationsBuyed>(this.detach_ReservationsBuyeds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMethod_ReservationsBuyed", Storage="_ReservationsBuyeds", ThisKey="Id", OtherKey="IdPaymentMethod")]
		public EntitySet<ReservationsBuyed> ReservationsBuyeds
		{
			get
			{
				return this._ReservationsBuyeds;
			}
			set
			{
				this._ReservationsBuyeds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationsBuyeds(ReservationsBuyed entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = this;
		}
		
		private void detach_ReservationsBuyeds(ReservationsBuyed entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Periods")]
	public partial class Period : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BeginDay;
		
		private int _EndDay;
		
		private int _IdHotel;
		
		private string _Name;
		
		private int _BeginMonth;
		
		private int _EndMonth;
		
		private EntityRef<Hotel> _Hotel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBeginDayChanging(int value);
    partial void OnBeginDayChanged();
    partial void OnEndDayChanging(int value);
    partial void OnEndDayChanged();
    partial void OnIdHotelChanging(int value);
    partial void OnIdHotelChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBeginMonthChanging(int value);
    partial void OnBeginMonthChanged();
    partial void OnEndMonthChanging(int value);
    partial void OnEndMonthChanged();
    #endregion
		
		public Period()
		{
			this._Hotel = default(EntityRef<Hotel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDay", DbType="Int NOT NULL")]
		public int BeginDay
		{
			get
			{
				return this._BeginDay;
			}
			set
			{
				if ((this._BeginDay != value))
				{
					this.OnBeginDayChanging(value);
					this.SendPropertyChanging();
					this._BeginDay = value;
					this.SendPropertyChanged("BeginDay");
					this.OnBeginDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDay", DbType="Int NOT NULL")]
		public int EndDay
		{
			get
			{
				return this._EndDay;
			}
			set
			{
				if ((this._EndDay != value))
				{
					this.OnEndDayChanging(value);
					this.SendPropertyChanging();
					this._EndDay = value;
					this.SendPropertyChanged("EndDay");
					this.OnEndDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdHotel", DbType="Int NOT NULL")]
		public int IdHotel
		{
			get
			{
				return this._IdHotel;
			}
			set
			{
				if ((this._IdHotel != value))
				{
					if (this._Hotel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdHotelChanging(value);
					this.SendPropertyChanging();
					this._IdHotel = value;
					this.SendPropertyChanged("IdHotel");
					this.OnIdHotelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginMonth", DbType="Int NOT NULL")]
		public int BeginMonth
		{
			get
			{
				return this._BeginMonth;
			}
			set
			{
				if ((this._BeginMonth != value))
				{
					this.OnBeginMonthChanging(value);
					this.SendPropertyChanging();
					this._BeginMonth = value;
					this.SendPropertyChanged("BeginMonth");
					this.OnBeginMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndMonth", DbType="Int NOT NULL")]
		public int EndMonth
		{
			get
			{
				return this._EndMonth;
			}
			set
			{
				if ((this._EndMonth != value))
				{
					this.OnEndMonthChanging(value);
					this.SendPropertyChanging();
					this._EndMonth = value;
					this.SendPropertyChanged("EndMonth");
					this.OnEndMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Period", Storage="_Hotel", ThisKey="IdHotel", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Hotel Hotel
		{
			get
			{
				return this._Hotel.Entity;
			}
			set
			{
				Hotel previousValue = this._Hotel.Entity;
				if (((previousValue != value) 
							|| (this._Hotel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hotel.Entity = null;
						previousValue.Periods.Remove(this);
					}
					this._Hotel.Entity = value;
					if ((value != null))
					{
						value.Periods.Add(this);
						this._IdHotel = value.Id;
					}
					else
					{
						this._IdHotel = default(int);
					}
					this.SendPropertyChanged("Hotel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Promotion")]
	public partial class Promotion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private decimal _LowSeasonPrice;
		
		private decimal _HighSeasonPrice;
		
		private int _IdRoom;
		
		private int _Id;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLowSeasonPriceChanging(decimal value);
    partial void OnLowSeasonPriceChanged();
    partial void OnHighSeasonPriceChanging(decimal value);
    partial void OnHighSeasonPriceChanged();
    partial void OnIdRoomChanging(int value);
    partial void OnIdRoomChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public Promotion()
		{
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowSeasonPrice", DbType="Money NOT NULL")]
		public decimal LowSeasonPrice
		{
			get
			{
				return this._LowSeasonPrice;
			}
			set
			{
				if ((this._LowSeasonPrice != value))
				{
					this.OnLowSeasonPriceChanging(value);
					this.SendPropertyChanging();
					this._LowSeasonPrice = value;
					this.SendPropertyChanged("LowSeasonPrice");
					this.OnLowSeasonPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighSeasonPrice", DbType="Money NOT NULL")]
		public decimal HighSeasonPrice
		{
			get
			{
				return this._HighSeasonPrice;
			}
			set
			{
				if ((this._HighSeasonPrice != value))
				{
					this.OnHighSeasonPriceChanging(value);
					this.SendPropertyChanging();
					this._HighSeasonPrice = value;
					this.SendPropertyChanged("HighSeasonPrice");
					this.OnHighSeasonPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRoom", DbType="Int NOT NULL")]
		public int IdRoom
		{
			get
			{
				return this._IdRoom;
			}
			set
			{
				if ((this._IdRoom != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRoomChanging(value);
					this.SendPropertyChanging();
					this._IdRoom = value;
					this.SendPropertyChanged("IdRoom");
					this.OnIdRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Promotion", Storage="_Room", ThisKey="IdRoom", OtherKey="Id", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Promotions.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Promotions.Add(this);
						this._IdRoom = value.Id;
					}
					else
					{
						this._IdRoom = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reservation")]
	public partial class Reservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _IdCustomer;
		
		private int _Id;
		
		private System.DateTime _Arrival;
		
		private System.DateTime _Departure;
		
		private System.DateTime _ReservationDate;
		
		private int _Adults;
		
		private int _Childrens;
		
		private decimal _Price;
		
		private int _IdRoom;
		
		private int _IdReservationStatus;
		
		private string _ClientNumber;
		
		private string _Agency;
		
		private EntitySet<ReservationsBuyed> _ReservationsBuyeds;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<ReservationStatus> _ReservationStatus;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCustomerChanging(System.Nullable<int> value);
    partial void OnIdCustomerChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnArrivalChanging(System.DateTime value);
    partial void OnArrivalChanged();
    partial void OnDepartureChanging(System.DateTime value);
    partial void OnDepartureChanged();
    partial void OnReservationDateChanging(System.DateTime value);
    partial void OnReservationDateChanged();
    partial void OnAdultsChanging(int value);
    partial void OnAdultsChanged();
    partial void OnChildrensChanging(int value);
    partial void OnChildrensChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnIdRoomChanging(int value);
    partial void OnIdRoomChanged();
    partial void OnIdReservationStatusChanging(int value);
    partial void OnIdReservationStatusChanged();
    partial void OnClientNumberChanging(string value);
    partial void OnClientNumberChanged();
    partial void OnAgencyChanging(string value);
    partial void OnAgencyChanged();
    #endregion
		
		public Reservation()
		{
			this._ReservationsBuyeds = new EntitySet<ReservationsBuyed>(new Action<ReservationsBuyed>(this.attach_ReservationsBuyeds), new Action<ReservationsBuyed>(this.detach_ReservationsBuyeds));
			this._Customer = default(EntityRef<Customer>);
			this._ReservationStatus = default(EntityRef<ReservationStatus>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCustomer", DbType="Int")]
		public System.Nullable<int> IdCustomer
		{
			get
			{
				return this._IdCustomer;
			}
			set
			{
				if ((this._IdCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCustomerChanging(value);
					this.SendPropertyChanging();
					this._IdCustomer = value;
					this.SendPropertyChanged("IdCustomer");
					this.OnIdCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arrival", DbType="DateTime NOT NULL")]
		public System.DateTime Arrival
		{
			get
			{
				return this._Arrival;
			}
			set
			{
				if ((this._Arrival != value))
				{
					this.OnArrivalChanging(value);
					this.SendPropertyChanging();
					this._Arrival = value;
					this.SendPropertyChanged("Arrival");
					this.OnArrivalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Departure", DbType="DateTime NOT NULL")]
		public System.DateTime Departure
		{
			get
			{
				return this._Departure;
			}
			set
			{
				if ((this._Departure != value))
				{
					this.OnDepartureChanging(value);
					this.SendPropertyChanging();
					this._Departure = value;
					this.SendPropertyChanged("Departure");
					this.OnDepartureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationDate", DbType="DateTime NOT NULL")]
		public System.DateTime ReservationDate
		{
			get
			{
				return this._ReservationDate;
			}
			set
			{
				if ((this._ReservationDate != value))
				{
					this.OnReservationDateChanging(value);
					this.SendPropertyChanging();
					this._ReservationDate = value;
					this.SendPropertyChanged("ReservationDate");
					this.OnReservationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adults", DbType="Int NOT NULL")]
		public int Adults
		{
			get
			{
				return this._Adults;
			}
			set
			{
				if ((this._Adults != value))
				{
					this.OnAdultsChanging(value);
					this.SendPropertyChanging();
					this._Adults = value;
					this.SendPropertyChanged("Adults");
					this.OnAdultsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Childrens", DbType="Int NOT NULL")]
		public int Childrens
		{
			get
			{
				return this._Childrens;
			}
			set
			{
				if ((this._Childrens != value))
				{
					this.OnChildrensChanging(value);
					this.SendPropertyChanging();
					this._Childrens = value;
					this.SendPropertyChanged("Childrens");
					this.OnChildrensChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRoom", DbType="Int NOT NULL")]
		public int IdRoom
		{
			get
			{
				return this._IdRoom;
			}
			set
			{
				if ((this._IdRoom != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRoomChanging(value);
					this.SendPropertyChanging();
					this._IdRoom = value;
					this.SendPropertyChanged("IdRoom");
					this.OnIdRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdReservationStatus", DbType="Int NOT NULL")]
		public int IdReservationStatus
		{
			get
			{
				return this._IdReservationStatus;
			}
			set
			{
				if ((this._IdReservationStatus != value))
				{
					if (this._ReservationStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdReservationStatusChanging(value);
					this.SendPropertyChanging();
					this._IdReservationStatus = value;
					this.SendPropertyChanged("IdReservationStatus");
					this.OnIdReservationStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientNumber", DbType="NVarChar(MAX)")]
		public string ClientNumber
		{
			get
			{
				return this._ClientNumber;
			}
			set
			{
				if ((this._ClientNumber != value))
				{
					this.OnClientNumberChanging(value);
					this.SendPropertyChanging();
					this._ClientNumber = value;
					this.SendPropertyChanged("ClientNumber");
					this.OnClientNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Agency", DbType="NVarChar(MAX)")]
		public string Agency
		{
			get
			{
				return this._Agency;
			}
			set
			{
				if ((this._Agency != value))
				{
					this.OnAgencyChanging(value);
					this.SendPropertyChanging();
					this._Agency = value;
					this.SendPropertyChanged("Agency");
					this.OnAgencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservation_ReservationsBuyed", Storage="_ReservationsBuyeds", ThisKey="Id", OtherKey="IdReservation")]
		public EntitySet<ReservationsBuyed> ReservationsBuyeds
		{
			get
			{
				return this._ReservationsBuyeds;
			}
			set
			{
				this._ReservationsBuyeds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Reservation", Storage="_Customer", ThisKey="IdCustomer", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Reservations.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Reservations.Add(this);
						this._IdCustomer = value.Id;
					}
					else
					{
						this._IdCustomer = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationStatus_Reservation", Storage="_ReservationStatus", ThisKey="IdReservationStatus", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ReservationStatus ReservationStatus
		{
			get
			{
				return this._ReservationStatus.Entity;
			}
			set
			{
				ReservationStatus previousValue = this._ReservationStatus.Entity;
				if (((previousValue != value) 
							|| (this._ReservationStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReservationStatus.Entity = null;
						previousValue.Reservations.Remove(this);
					}
					this._ReservationStatus.Entity = value;
					if ((value != null))
					{
						value.Reservations.Add(this);
						this._IdReservationStatus = value.Id;
					}
					else
					{
						this._IdReservationStatus = default(int);
					}
					this.SendPropertyChanged("ReservationStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Reservation", Storage="_Room", ThisKey="IdRoom", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Reservations.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Reservations.Add(this);
						this._IdRoom = value.Id;
					}
					else
					{
						this._IdRoom = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationsBuyeds(ReservationsBuyed entity)
		{
			this.SendPropertyChanging();
			entity.Reservation = this;
		}
		
		private void detach_ReservationsBuyeds(ReservationsBuyed entity)
		{
			this.SendPropertyChanging();
			entity.Reservation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReservationsBuyed")]
	public partial class ReservationsBuyed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdReservation;
		
		private int _IdPaymentMethod;
		
		private int _TransactionNumber;
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<decimal> _TotalPayed;
		
		private EntityRef<PaymentMethod> _PaymentMethod;
		
		private EntityRef<Reservation> _Reservation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdReservationChanging(int value);
    partial void OnIdReservationChanged();
    partial void OnIdPaymentMethodChanging(int value);
    partial void OnIdPaymentMethodChanged();
    partial void OnTransactionNumberChanging(int value);
    partial void OnTransactionNumberChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTotalPayedChanging(System.Nullable<decimal> value);
    partial void OnTotalPayedChanged();
    #endregion
		
		public ReservationsBuyed()
		{
			this._PaymentMethod = default(EntityRef<PaymentMethod>);
			this._Reservation = default(EntityRef<Reservation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdReservation", DbType="Int NOT NULL")]
		public int IdReservation
		{
			get
			{
				return this._IdReservation;
			}
			set
			{
				if ((this._IdReservation != value))
				{
					if (this._Reservation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdReservationChanging(value);
					this.SendPropertyChanging();
					this._IdReservation = value;
					this.SendPropertyChanged("IdReservation");
					this.OnIdReservationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPaymentMethod", DbType="Int NOT NULL")]
		public int IdPaymentMethod
		{
			get
			{
				return this._IdPaymentMethod;
			}
			set
			{
				if ((this._IdPaymentMethod != value))
				{
					if (this._PaymentMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPaymentMethodChanging(value);
					this.SendPropertyChanging();
					this._IdPaymentMethod = value;
					this.SendPropertyChanged("IdPaymentMethod");
					this.OnIdPaymentMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionNumber", DbType="Int NOT NULL")]
		public int TransactionNumber
		{
			get
			{
				return this._TransactionNumber;
			}
			set
			{
				if ((this._TransactionNumber != value))
				{
					this.OnTransactionNumberChanging(value);
					this.SendPropertyChanging();
					this._TransactionNumber = value;
					this.SendPropertyChanged("TransactionNumber");
					this.OnTransactionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPayed", DbType="Money")]
		public System.Nullable<decimal> TotalPayed
		{
			get
			{
				return this._TotalPayed;
			}
			set
			{
				if ((this._TotalPayed != value))
				{
					this.OnTotalPayedChanging(value);
					this.SendPropertyChanging();
					this._TotalPayed = value;
					this.SendPropertyChanged("TotalPayed");
					this.OnTotalPayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMethod_ReservationsBuyed", Storage="_PaymentMethod", ThisKey="IdPaymentMethod", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PaymentMethod PaymentMethod
		{
			get
			{
				return this._PaymentMethod.Entity;
			}
			set
			{
				PaymentMethod previousValue = this._PaymentMethod.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMethod.Entity = null;
						previousValue.ReservationsBuyeds.Remove(this);
					}
					this._PaymentMethod.Entity = value;
					if ((value != null))
					{
						value.ReservationsBuyeds.Add(this);
						this._IdPaymentMethod = value.Id;
					}
					else
					{
						this._IdPaymentMethod = default(int);
					}
					this.SendPropertyChanged("PaymentMethod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservation_ReservationsBuyed", Storage="_Reservation", ThisKey="IdReservation", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Reservation Reservation
		{
			get
			{
				return this._Reservation.Entity;
			}
			set
			{
				Reservation previousValue = this._Reservation.Entity;
				if (((previousValue != value) 
							|| (this._Reservation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reservation.Entity = null;
						previousValue.ReservationsBuyeds.Remove(this);
					}
					this._Reservation.Entity = value;
					if ((value != null))
					{
						value.ReservationsBuyeds.Add(this);
						this._IdReservation = value.Id;
					}
					else
					{
						this._IdReservation = default(int);
					}
					this.SendPropertyChanged("Reservation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReservationStatus")]
	public partial class ReservationStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Reservation> _Reservations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ReservationStatus()
		{
			this._Reservations = new EntitySet<Reservation>(new Action<Reservation>(this.attach_Reservations), new Action<Reservation>(this.detach_Reservations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationStatus_Reservation", Storage="_Reservations", ThisKey="Id", OtherKey="IdReservationStatus")]
		public EntitySet<Reservation> Reservations
		{
			get
			{
				return this._Reservations;
			}
			set
			{
				this._Reservations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.ReservationStatus = this;
		}
		
		private void detach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.ReservationStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _IdHotel;
		
		private bool _Active;
		
		private int _Capacity;
		
		private decimal _LowSeasonPrice;
		
		private decimal _HighSeasonPrice;
		
		private int _Discount1;
		
		private int _Discount2;
		
		private int _Discount3;
		
		private int _Discount4;
		
		private EntitySet<Promotion> _Promotions;
		
		private EntitySet<Reservation> _Reservations;
		
		private EntityRef<Hotel> _Hotel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIdHotelChanging(int value);
    partial void OnIdHotelChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnLowSeasonPriceChanging(decimal value);
    partial void OnLowSeasonPriceChanged();
    partial void OnHighSeasonPriceChanging(decimal value);
    partial void OnHighSeasonPriceChanged();
    partial void OnDiscount1Changing(int value);
    partial void OnDiscount1Changed();
    partial void OnDiscount2Changing(int value);
    partial void OnDiscount2Changed();
    partial void OnDiscount3Changing(int value);
    partial void OnDiscount3Changed();
    partial void OnDiscount4Changing(int value);
    partial void OnDiscount4Changed();
    #endregion
		
		public Room()
		{
			this._Promotions = new EntitySet<Promotion>(new Action<Promotion>(this.attach_Promotions), new Action<Promotion>(this.detach_Promotions));
			this._Reservations = new EntitySet<Reservation>(new Action<Reservation>(this.attach_Reservations), new Action<Reservation>(this.detach_Reservations));
			this._Hotel = default(EntityRef<Hotel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdHotel", DbType="Int NOT NULL")]
		public int IdHotel
		{
			get
			{
				return this._IdHotel;
			}
			set
			{
				if ((this._IdHotel != value))
				{
					if (this._Hotel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdHotelChanging(value);
					this.SendPropertyChanging();
					this._IdHotel = value;
					this.SendPropertyChanged("IdHotel");
					this.OnIdHotelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowSeasonPrice", DbType="Money NOT NULL")]
		public decimal LowSeasonPrice
		{
			get
			{
				return this._LowSeasonPrice;
			}
			set
			{
				if ((this._LowSeasonPrice != value))
				{
					this.OnLowSeasonPriceChanging(value);
					this.SendPropertyChanging();
					this._LowSeasonPrice = value;
					this.SendPropertyChanged("LowSeasonPrice");
					this.OnLowSeasonPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighSeasonPrice", DbType="Money NOT NULL")]
		public decimal HighSeasonPrice
		{
			get
			{
				return this._HighSeasonPrice;
			}
			set
			{
				if ((this._HighSeasonPrice != value))
				{
					this.OnHighSeasonPriceChanging(value);
					this.SendPropertyChanging();
					this._HighSeasonPrice = value;
					this.SendPropertyChanged("HighSeasonPrice");
					this.OnHighSeasonPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount1", DbType="Int NOT NULL")]
		public int Discount1
		{
			get
			{
				return this._Discount1;
			}
			set
			{
				if ((this._Discount1 != value))
				{
					this.OnDiscount1Changing(value);
					this.SendPropertyChanging();
					this._Discount1 = value;
					this.SendPropertyChanged("Discount1");
					this.OnDiscount1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount2", DbType="Int NOT NULL")]
		public int Discount2
		{
			get
			{
				return this._Discount2;
			}
			set
			{
				if ((this._Discount2 != value))
				{
					this.OnDiscount2Changing(value);
					this.SendPropertyChanging();
					this._Discount2 = value;
					this.SendPropertyChanged("Discount2");
					this.OnDiscount2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount3", DbType="Int NOT NULL")]
		public int Discount3
		{
			get
			{
				return this._Discount3;
			}
			set
			{
				if ((this._Discount3 != value))
				{
					this.OnDiscount3Changing(value);
					this.SendPropertyChanging();
					this._Discount3 = value;
					this.SendPropertyChanged("Discount3");
					this.OnDiscount3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount4", DbType="Int NOT NULL")]
		public int Discount4
		{
			get
			{
				return this._Discount4;
			}
			set
			{
				if ((this._Discount4 != value))
				{
					this.OnDiscount4Changing(value);
					this.SendPropertyChanging();
					this._Discount4 = value;
					this.SendPropertyChanged("Discount4");
					this.OnDiscount4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Promotion", Storage="_Promotions", ThisKey="Id", OtherKey="IdRoom")]
		public EntitySet<Promotion> Promotions
		{
			get
			{
				return this._Promotions;
			}
			set
			{
				this._Promotions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Reservation", Storage="_Reservations", ThisKey="Id", OtherKey="IdRoom")]
		public EntitySet<Reservation> Reservations
		{
			get
			{
				return this._Reservations;
			}
			set
			{
				this._Reservations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Room", Storage="_Hotel", ThisKey="IdHotel", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Hotel Hotel
		{
			get
			{
				return this._Hotel.Entity;
			}
			set
			{
				Hotel previousValue = this._Hotel.Entity;
				if (((previousValue != value) 
							|| (this._Hotel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hotel.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._Hotel.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._IdHotel = value.Id;
					}
					else
					{
						this._IdHotel = default(int);
					}
					this.SendPropertyChanged("Hotel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Promotions(Promotion entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Promotions(Promotion entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
		
		private void attach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _IdPosada;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<int> _DurationDays;
		
		private System.Nullable<bool> _BuyLater;
		
		private EntityRef<Hotel> _Hotel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIdPosadaChanging(int value);
    partial void OnIdPosadaChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnDurationDaysChanging(System.Nullable<int> value);
    partial void OnDurationDaysChanged();
    partial void OnBuyLaterChanging(System.Nullable<bool> value);
    partial void OnBuyLaterChanged();
    #endregion
		
		public Service()
		{
			this._Hotel = default(EntityRef<Hotel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPosada", DbType="Int NOT NULL")]
		public int IdPosada
		{
			get
			{
				return this._IdPosada;
			}
			set
			{
				if ((this._IdPosada != value))
				{
					if (this._Hotel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPosadaChanging(value);
					this.SendPropertyChanging();
					this._IdPosada = value;
					this.SendPropertyChanged("IdPosada");
					this.OnIdPosadaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationDays", DbType="Int")]
		public System.Nullable<int> DurationDays
		{
			get
			{
				return this._DurationDays;
			}
			set
			{
				if ((this._DurationDays != value))
				{
					this.OnDurationDaysChanging(value);
					this.SendPropertyChanging();
					this._DurationDays = value;
					this.SendPropertyChanged("DurationDays");
					this.OnDurationDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyLater", DbType="Bit")]
		public System.Nullable<bool> BuyLater
		{
			get
			{
				return this._BuyLater;
			}
			set
			{
				if ((this._BuyLater != value))
				{
					this.OnBuyLaterChanging(value);
					this.SendPropertyChanging();
					this._BuyLater = value;
					this.SendPropertyChanged("BuyLater");
					this.OnBuyLaterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Service", Storage="_Hotel", ThisKey="IdPosada", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Hotel Hotel
		{
			get
			{
				return this._Hotel.Entity;
			}
			set
			{
				Hotel previousValue = this._Hotel.Entity;
				if (((previousValue != value) 
							|| (this._Hotel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hotel.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Hotel.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._IdPosada = value.Id;
					}
					else
					{
						this._IdPosada = default(int);
					}
					this.SendPropertyChanged("Hotel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
